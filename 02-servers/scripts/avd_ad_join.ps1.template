# ------------------------------------------------------------
# Only run this script if not already joined to the domain
# ------------------------------------------------------------

$computerSystem = Get-WmiObject -Class Win32_ComputerSystem

if ($computerSystem.PartOfDomain) {
    Write-Output "Machine is already joined to a domain ($($computerSystem.Domain)). Exiting script."
    exit
}

# ------------------------------------------------------------
# Install Active Directory Components
# ------------------------------------------------------------

# Suppress progress bars to speed up execution
$ProgressPreference = 'SilentlyContinue'

# ------------------------------------------------------------
# Install AZ CLI
# ------------------------------------------------------------

Invoke-WebRequest -Uri https://aka.ms/installazurecliwindowsx64 -OutFile .\AzureCLI.msi
Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'
Remove-Item .\AzureCLI.msi
$env:Path += ";C:\Program Files\Microsoft SDKs\Azure\CLI2\wbin"

# ------------------------------------------------------------
# Join instance to active directory
# ------------------------------------------------------------

az login --identity --allow-no-subscriptions
$secretJson = az keyvault secret show --name admin-ad-credentials --vault-name ${vault_name} --query value -o tsv
$secretObject = $secretJson | ConvertFrom-Json
$password = $secretObject.password | ConvertTo-SecureString -AsPlainText -Force
$cred = New-Object -TypeName System.Management.Automation.PSCredential -ArgumentList $secretObject.username, $password

$retryCount = 0
$maxRetries = 6
$waitTime = 600 # 600 seconds = 10 minutes

# ------------------------------------------------------------
# Since we build the VM instance immediately after creating
# the active directory domain services it possible that the 
# user sync hasn't happened yet. This loop keeps trying until
# the join user is valid.
# ------------------------------------------------------------

while ($retryCount -lt $maxRetries) {
    try {
        Add-Computer -DomainName "${domain_fqdn}" -Credential $cred -Force -ErrorAction Stop
        Write-Output "Successfully joined the domain."
        break # Exit the loop if successful
    } catch {
        $retryCount++
        Write-Output "Failed to join domain. Attempt $retryCount of $maxRetries."

        if ($retryCount -lt $maxRetries) {
            Write-Output "Waiting for $waitTime seconds before retrying..."
            Start-Sleep -Seconds $waitTime
        } else {
            Write-Output "Max retries reached. Failing the script."
            exit 1
        }
    }
}

# ------------------------------------------------------------
# Install AVD agent and bootloader
# ------------------------------------------------------------

$token = "${token}"
$installPath = "C:\AVDInstall"
$agentUrl = "https://go.microsoft.com/fwlink/?linkid=2310011"
$bootloaderUrl = "https://go.microsoft.com/fwlink/?linkid=2311028"

# Create install directory
New-Item -ItemType Directory -Path $installPath -Force | Out-Null
Set-Location $installPath

# Download AVD Agent
Write-Host "Downloading AVD Agent..."
Invoke-WebRequest -Uri $agentUrl -OutFile "avd-agent.msi"

# Download Bootloader
Write-Host "Downloading AVD Bootloader..."
Invoke-WebRequest -Uri $bootloaderUrl -OutFile "avd-bootloader.msi"

# Install AVD Agent with registration token
Write-Host "Installing AVD Agent..."
Start-Process msiexec.exe -ArgumentList "/i", "avd-agent.msi", "/quiet", "/qn", "/norestart", "REGISTRATIONTOKEN=$token" -Wait
#Start-Process msiexec.exe -ArgumentList "/i `"avd-agent.msi`" /quiet /qn /norestart REGISTRATIONTOKEN=$token" -Wait

# Install AVD Bootloader
Write-Host "Installing Bootloader..."
Start-Process msiexec.exe -ArgumentList "/i", "avd-bootloader.msi", "/quiet", "/qn", "/norestart" -Wait
#Start-Process msiexec.exe -ArgumentList "/i `"avd-bootloader.msi`" /quiet /qn /norestart" -Wait

Write-Host "AVD agent and bootloader installed successfully."

# ------------------------------------------------------------
# Add users to remote desktop group
# ------------------------------------------------------------

Write-Output "Add users to the Remote Desktop Users Group"
Add-LocalGroupMember -Group "Remote Desktop Users" -Member "mcloud-users"

# ------------------------------------------------------------
# Final Reboot to Apply Changes
# ------------------------------------------------------------

Write-Output "Finalize join with a reboot"

# Reboot the server to finalize the domain join and group policies
shutdown /r /t 5 /c "Initial reboot to join domain" /f /d p:4:1